/// Ontology classes
pub mod classes;
/// Ontology IRIs
pub mod iri;
/// Ontology properties
pub mod properties;
use graph;
use ontology_adapter;
/// Adapter to access RDF data in graph via the ontology
pub fn adapter<'g, G>(graph: &'g G) -> ontology_adapter::OntologyAdapter<'g, G>
where
    G: graph::Graph<'g>,
{
    let mut iris = Vec::with_capacity(147);
    iris.push(graph.find_iri(iri::rdf::TYPE));
    iris.push(graph.find_iri(iri::rdf::ALT));
    iris.push(graph.find_iri(iri::rdf::BAG));
    iris.push(graph.find_iri(iri::rdf::HTML));
    iris.push(graph.find_iri(iri::rdf::LIST));
    iris.push(graph.find_iri(iri::rdf::PLAIN_LITERAL));
    iris.push(graph.find_iri(iri::rdf::PROPERTY));
    iris.push(graph.find_iri(iri::rdf::SEQ));
    iris.push(graph.find_iri(iri::rdf::STATEMENT));
    iris.push(graph.find_iri(iri::rdf::XMLLITERAL));
    iris.push(graph.find_iri(iri::rdf::LANG_STRING));
    iris.push(graph.find_iri(iri::rdfs::CLASS));
    iris.push(graph.find_iri(iri::rdfs::CONTAINER));
    iris.push(graph.find_iri(iri::rdfs::CONTAINER_MEMBERSHIP_PROPERTY));
    iris.push(graph.find_iri(iri::rdfs::DATATYPE));
    iris.push(graph.find_iri(iri::rdfs::LITERAL));
    iris.push(graph.find_iri(iri::rdfs::RESOURCE));
    iris.push(graph.find_iri(iri::xsd::ENTITY));
    iris.push(graph.find_iri(iri::xsd::ID));
    iris.push(graph.find_iri(iri::xsd::IDREF));
    iris.push(graph.find_iri(iri::xsd::NCNAME));
    iris.push(graph.find_iri(iri::xsd::NMTOKEN));
    iris.push(graph.find_iri(iri::xsd::NOTATION));
    iris.push(graph.find_iri(iri::xsd::NAME));
    iris.push(graph.find_iri(iri::xsd::QNAME));
    iris.push(graph.find_iri(iri::xsd::ANY_SIMPLE_TYPE));
    iris.push(graph.find_iri(iri::xsd::ANY_URI));
    iris.push(graph.find_iri(iri::xsd::BASE64_BINARY));
    iris.push(graph.find_iri(iri::xsd::BOOLEAN));
    iris.push(graph.find_iri(iri::xsd::BYTE));
    iris.push(graph.find_iri(iri::xsd::DATE));
    iris.push(graph.find_iri(iri::xsd::DATE_TIME));
    iris.push(graph.find_iri(iri::xsd::DECIMAL));
    iris.push(graph.find_iri(iri::xsd::DOUBLE));
    iris.push(graph.find_iri(iri::xsd::DURATION));
    iris.push(graph.find_iri(iri::xsd::FLOAT));
    iris.push(graph.find_iri(iri::xsd::G_DAY));
    iris.push(graph.find_iri(iri::xsd::G_MONTH));
    iris.push(graph.find_iri(iri::xsd::G_MONTH_DAY));
    iris.push(graph.find_iri(iri::xsd::G_YEAR));
    iris.push(graph.find_iri(iri::xsd::G_YEAR_MONTH));
    iris.push(graph.find_iri(iri::xsd::HEX_BINARY));
    iris.push(graph.find_iri(iri::xsd::INT));
    iris.push(graph.find_iri(iri::xsd::INTEGER));
    iris.push(graph.find_iri(iri::xsd::LANGUAGE));
    iris.push(graph.find_iri(iri::xsd::LONG));
    iris.push(graph.find_iri(iri::xsd::NEGATIVE_INTEGER));
    iris.push(graph.find_iri(iri::xsd::NON_NEGATIVE_INTEGER));
    iris.push(graph.find_iri(iri::xsd::NON_POSITIVE_INTEGER));
    iris.push(graph.find_iri(iri::xsd::NORMALIZED_STRING));
    iris.push(graph.find_iri(iri::xsd::POSITIVE_INTEGER));
    iris.push(graph.find_iri(iri::xsd::SHORT));
    iris.push(graph.find_iri(iri::xsd::STRING));
    iris.push(graph.find_iri(iri::xsd::TIME));
    iris.push(graph.find_iri(iri::xsd::TOKEN));
    iris.push(graph.find_iri(iri::xsd::UNSIGNED_BYTE));
    iris.push(graph.find_iri(iri::xsd::UNSIGNED_INT));
    iris.push(graph.find_iri(iri::xsd::UNSIGNED_LONG));
    iris.push(graph.find_iri(iri::xsd::UNSIGNED_SHORT));
    iris.push(graph.find_iri(iri::owl::ALL_DIFFERENT));
    iris.push(graph.find_iri(iri::owl::ALL_DISJOINT_CLASSES));
    iris.push(graph.find_iri(iri::owl::ALL_DISJOINT_PROPERTIES));
    iris.push(graph.find_iri(iri::owl::ANNOTATION));
    iris.push(graph.find_iri(iri::owl::ANNOTATION_PROPERTY));
    iris.push(graph.find_iri(iri::owl::ASYMMETRIC_PROPERTY));
    iris.push(graph.find_iri(iri::owl::AXIOM));
    iris.push(graph.find_iri(iri::owl::CLASS));
    iris.push(graph.find_iri(iri::owl::DATA_RANGE));
    iris.push(graph.find_iri(iri::owl::DATATYPE_PROPERTY));
    iris.push(graph.find_iri(iri::owl::DEPRECATED_CLASS));
    iris.push(graph.find_iri(iri::owl::DEPRECATED_PROPERTY));
    iris.push(graph.find_iri(iri::owl::FUNCTIONAL_PROPERTY));
    iris.push(graph.find_iri(iri::owl::INVERSE_FUNCTIONAL_PROPERTY));
    iris.push(graph.find_iri(iri::owl::IRREFLEXIVE_PROPERTY));
    iris.push(graph.find_iri(iri::owl::NAMED_INDIVIDUAL));
    iris.push(graph.find_iri(iri::owl::NEGATIVE_PROPERTY_ASSERTION));
    iris.push(graph.find_iri(iri::owl::NOTHING));
    iris.push(graph.find_iri(iri::owl::OBJECT_PROPERTY));
    iris.push(graph.find_iri(iri::owl::ONTOLOGY));
    iris.push(graph.find_iri(iri::owl::ONTOLOGY_PROPERTY));
    iris.push(graph.find_iri(iri::owl::REFLEXIVE_PROPERTY));
    iris.push(graph.find_iri(iri::owl::RESTRICTION));
    iris.push(graph.find_iri(iri::owl::SYMMETRIC_PROPERTY));
    iris.push(graph.find_iri(iri::owl::THING));
    iris.push(graph.find_iri(iri::owl::TRANSITIVE_PROPERTY));
    iris.push(graph.find_iri(iri::dc::DESCRIPTION));
    iris.push(graph.find_iri(iri::dc::TITLE));
    iris.push(graph.find_iri(iri::rdf::FIRST));
    iris.push(graph.find_iri(iri::rdf::OBJECT));
    iris.push(graph.find_iri(iri::rdf::PREDICATE));
    iris.push(graph.find_iri(iri::rdf::REST));
    iris.push(graph.find_iri(iri::rdf::SUBJECT));
    iris.push(graph.find_iri(iri::rdf::TYPE));
    iris.push(graph.find_iri(iri::rdf::VALUE));
    iris.push(graph.find_iri(iri::rdfs::COMMENT));
    iris.push(graph.find_iri(iri::rdfs::DOMAIN));
    iris.push(graph.find_iri(iri::rdfs::IS_DEFINED_BY));
    iris.push(graph.find_iri(iri::rdfs::LABEL));
    iris.push(graph.find_iri(iri::rdfs::MEMBER));
    iris.push(graph.find_iri(iri::rdfs::RANGE));
    iris.push(graph.find_iri(iri::rdfs::SEE_ALSO));
    iris.push(graph.find_iri(iri::rdfs::SUB_CLASS_OF));
    iris.push(graph.find_iri(iri::rdfs::SUB_PROPERTY_OF));
    iris.push(graph.find_iri(iri::owl::ALL_VALUES_FROM));
    iris.push(graph.find_iri(iri::owl::ANNOTATED_PROPERTY));
    iris.push(graph.find_iri(iri::owl::ANNOTATED_SOURCE));
    iris.push(graph.find_iri(iri::owl::ANNOTATED_TARGET));
    iris.push(graph.find_iri(iri::owl::ASSERTION_PROPERTY));
    iris.push(graph.find_iri(iri::owl::CARDINALITY));
    iris.push(graph.find_iri(iri::owl::COMPLEMENT_OF));
    iris.push(graph.find_iri(iri::owl::DATATYPE_COMPLEMENT_OF));
    iris.push(graph.find_iri(iri::owl::DIFFERENT_FROM));
    iris.push(graph.find_iri(iri::owl::DISJOINT_UNION_OF));
    iris.push(graph.find_iri(iri::owl::DISJOINT_WITH));
    iris.push(graph.find_iri(iri::owl::DISTINCT_MEMBERS));
    iris.push(graph.find_iri(iri::owl::EQUIVALENT_CLASS));
    iris.push(graph.find_iri(iri::owl::EQUIVALENT_PROPERTY));
    iris.push(graph.find_iri(iri::owl::HAS_KEY));
    iris.push(graph.find_iri(iri::owl::HAS_SELF));
    iris.push(graph.find_iri(iri::owl::HAS_VALUE));
    iris.push(graph.find_iri(iri::owl::IMPORTS));
    iris.push(graph.find_iri(iri::owl::INTERSECTION_OF));
    iris.push(graph.find_iri(iri::owl::INVERSE_OF));
    iris.push(graph.find_iri(iri::owl::MAX_CARDINALITY));
    iris.push(graph.find_iri(iri::owl::MAX_QUALIFIED_CARDINALITY));
    iris.push(graph.find_iri(iri::owl::MEMBERS));
    iris.push(graph.find_iri(iri::owl::MIN_CARDINALITY));
    iris.push(graph.find_iri(iri::owl::MIN_QUALIFIED_CARDINALITY));
    iris.push(graph.find_iri(iri::owl::ON_CLASS));
    iris.push(graph.find_iri(iri::owl::ON_DATA_RANGE));
    iris.push(graph.find_iri(iri::owl::ON_DATATYPE));
    iris.push(graph.find_iri(iri::owl::ON_PROPERTIES));
    iris.push(graph.find_iri(iri::owl::ON_PROPERTY));
    iris.push(graph.find_iri(iri::owl::ONE_OF));
    iris.push(graph.find_iri(iri::owl::PROPERTY_CHAIN_AXIOM));
    iris.push(graph.find_iri(iri::owl::PROPERTY_DISJOINT_WITH));
    iris.push(graph.find_iri(iri::owl::QUALIFIED_CARDINALITY));
    iris.push(graph.find_iri(iri::owl::SAME_AS));
    iris.push(graph.find_iri(iri::owl::SOME_VALUES_FROM));
    iris.push(graph.find_iri(iri::owl::SOURCE_INDIVIDUAL));
    iris.push(graph.find_iri(iri::owl::TARGET_INDIVIDUAL));
    iris.push(graph.find_iri(iri::owl::TARGET_VALUE));
    iris.push(graph.find_iri(iri::owl::UNION_OF));
    iris.push(graph.find_iri(iri::owl::VERSION_IRI));
    iris.push(graph.find_iri(iri::owl::VERSION_INFO));
    iris.push(graph.find_iri(iri::owl::WITH_RESTRICTIONS));
    iris.push(graph.find_iri(iri::grddl::NAMESPACE_TRANSFORMATION));
    ontology_adapter::OntologyAdapter::new(graph, iris)
}
